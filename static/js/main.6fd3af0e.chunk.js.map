{"version":3,"sources":["components/Form/Form.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/phonebook-actions.js","redux/phonebook-reducer.js","redux/store.js","redux/phonebook-selectors.js","components/Container/Container.js","components/Section/Section.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","state","filter","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","getContacts","getFilter","getVisibleContacts","todos","normalizedFilter","toLowerCase","includes","Container","children","className","s","container","Section","title","section","MyForm","useSelector","dispatch","useDispatch","useState","setName","setNumber","onSubmit","e","preventDefault","namesInPhonebook","reduce","acc","contact","numbersInPhonebook","alert","contactMatching","phonebookActions","form","type","value","placeholder","onChange","currentTarget","input","country","buttonWrapper","button","Filter","target","ContactList","list","map","item","heart","text","span","onClick","onDeleteContact","times","App","useRef","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,qBAAqB,cAAgB,8B,mBCAtHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,mBCA7DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mBCA1DD,EAAOC,QAAU,CAAC,UAAY,+B,yNCIjBC,EAAaC,YAAa,iBAAiB,SAACC,EAAMC,GAAP,MAAmB,CACzEC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cAGSK,EAAgBP,YAAa,oBAC7BQ,EAAeR,YAAa,0BCAnCS,EAAQC,YARU,CACtB,CAAEN,GAAI,OAAQH,KAAM,YAAaC,OAAQ,eACzC,CAAEE,GAAI,OAAQH,KAAM,kBAAmBC,OAAQ,gBAC/C,CAAEE,GAAI,OAAQH,KAAM,aAAcC,OAAQ,eAC1C,CAAEE,GAAI,OAAQH,KAAM,mBAAoBC,OAAQ,iBAIvB,mBACxBH,GAAa,SAACY,EAAD,YAAUR,SAAV,mBAAqCQ,OAD1B,cAExBJ,GAAgB,SAACI,EAAD,OAAUR,EAAV,EAAUA,QAAV,OACfQ,EAAMC,QAAO,qBAAGR,KAAgBD,QAHT,IAMrBS,EAASF,YAAc,GAAD,eACzBF,GAAe,SAACG,EAAD,YAAUR,YA8BbU,cAAgB,CAC7BJ,QACAG,WCrCIE,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAyB,CAC7BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGDC,EAAQC,YAAe,CAClCC,QAAS,CACPC,SAAUC,YAAeR,EAAwBS,IAEnDpB,aACAqB,UAAUC,IAGCC,EAAYC,YAAaT,GCtCzBU,EAAc,SAAA5B,GAAK,OAAIA,EAAMqB,SAASvB,OACtC+B,EAAY,SAAA7B,GAAK,OAAIA,EAAMqB,SAASpB,QAEpC6B,EAAqB,SAAA9B,GAChC,IAAM+B,EAAQH,EAAY5B,GAEpBgC,EADSH,EAAU7B,GACOiC,cAEhC,OAAOF,EAAM9B,QAAO,qBAAGX,KAChB2C,cAAcC,SAASF,O,iBCFjBG,EAJG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,K,iBCajBI,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOL,EAAY,EAAZA,SACxB,OACE,sBAAKC,UAAWC,IAAEI,QAAlB,UACE,oBAAIL,UAAWC,IAAEG,MAAjB,SAAyBA,IACxBL,M,kDCGQ,SAASO,IAEtB,IAAMtB,EAAWuB,YAAYhB,GACvBiB,EAAWC,cAHc,EAOPC,mBAAS,IAPF,mBAOxBzD,EAPwB,KAOlB0D,EAPkB,OAQHD,mBAAS,IARN,mBAQxBxD,EARwB,KAQhB0D,EARgB,KA+C/B,OACE,uBAAMC,SAba,SAAAC,GACnBA,EAAEC,iBACFJ,EAAQ,IACRC,EAAU,IA5BY,WACtB,IAAMI,EAAmBhC,EAASiC,QAChC,SAACC,EAAKC,GAAN,4BAAsBD,GAAtB,CAA2BC,EAAQlE,SACnC,IAGImE,EAAqBpC,EAASiC,QAClC,SAACC,EAAKC,GAAN,4BAAsBD,GAAtB,CAA2BC,EAAQjE,WACnC,IAGF,OACE8D,EAAiBnB,SAAS5C,IAC1BmE,EAAmBvB,SAAS3C,IAE5BmE,MAAM,GAAD,OAAIpE,GAAJ,OAAWC,EAAX,6BACE,GAGI,KAATD,GAA0B,KAAXC,GACjBmE,MAAM,0BACC,QAFT,EAWIC,IApCW,SAACrE,EAAMC,GACtBsD,EAASe,EAA4BtE,EAAMC,IAuC3C2D,CAAS5D,EAAMC,IAIe8C,UAAWC,IAAEuB,KAA3C,UACE,yCAEE,uBACEC,KAAK,OACLxE,KAAK,OACLyE,MAAOzE,EACP0E,YAAY,YACZC,SAAU,SAAAd,GAAC,OAAIH,EAAQG,EAAEe,cAAcH,QACvC1B,UAAWC,IAAE6B,WAGjB,2CAEE,cAAC,IAAD,CACEC,QAAS,KACTL,MAAOxE,EACPyE,YAAY,cACZC,SAAUhB,OAGd,qBAAKZ,UAAWC,IAAE+B,cAAlB,SACE,wBAAQP,KAAK,SAASzB,UAAWC,IAAEgC,OAAnC,8B,qBCzEO,SAASC,IAEtB,IAAMR,EAAQnB,YAAYf,GACpBgB,EAAWC,cAGjB,OACE,wBAAOT,UAAWC,IAAErC,OAApB,kCAEE,uBACE6D,KAAK,OACLC,MAAOA,EACPE,SARW,SAAAd,GAAC,OAAIN,EAASe,EAA8BT,EAAEqB,OAAOT,SAShEC,YAAY,uBACZ3B,UAAWC,IAAE6B,W,oBCdN,SAASM,IAEtB,IAAMpD,EAAWuB,YAAYd,GACvBe,EAAWC,cAEjB,OACE,oBAAIT,UAAWC,IAAEoC,KAAjB,SACGrD,EAASsD,KAAI,gBAAGlF,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAa8C,UAAWC,IAAEsC,KAA1B,UACE,sBAAMvC,UAAWC,IAAEuC,MAAnB,oBACA,oBAAGxC,UAAWC,IAAEwC,KAAhB,UACGxF,EADH,KACWC,KAEX,sBAAM8C,UAAWC,IAAEyC,OACnB,wBACEjB,KAAK,SACLkB,QAAS,kBAZK,SAAAvF,GAAE,OAAIoD,EAASe,EAA+BnE,IAY7CwF,CAAgBxF,IAC/B4C,UAAWC,IAAEgC,OAHf,SAKE,sBAAMjC,UAAWC,IAAE4C,MAAnB,sBAXKzF,QCJF,SAAS0F,KAELvC,YAAYd,GACZgB,cAEKsC,kBAAO,GAiB7B,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAS3C,MAAM,YAAf,SACE,cAACE,EAAD,MAEF,eAAC,EAAD,CAASF,MAAM,WAAf,UACE,cAAC8B,EAAD,IACA,cAACE,EAAD,U,MC/BRY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAasE,QAAS,KAAM9D,UAAWA,EAAvC,SACE,cAAC,IAAD,UACE,cAACyD,GAAD,YAKRM,SAASC,eAAe,U,kBClB1BxG,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,OAAS,4BAA4B,MAAQ,2BAA2B,MAAQ,8B","file":"static/js/main.6fd3af0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2yJcn\",\"input\":\"Form_input__3z9gK\",\"button\":\"Form_button__Xazgn\",\"buttonWrapper\":\"Form_buttonWrapper__tTWUp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__mLW2N\",\"title\":\"Section_title__XsPoA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1EQvS\",\"input\":\"Filter_input__2MvRe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1Wq9A\"};","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n// import types from './phonebook-types';\n\n//*** Step 2 ***\nexport const addContact = createAction('phonebook/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\nexport const deleteContact = createAction('phonebook/delete');\nexport const changeFilter = createAction('phonebook/changeFilter');\n\n//*** Step 1 ***\n// export const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: shortid.generate(),\n//     name,\n//     number,\n//   },\n// });\n\n// export const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// export const overwriteContacts = newContacts => ({\n//   type: types.OVERWRITE,\n//   payload: newContacts,\n// });\n\n// export const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './phonebook-actions';\n// import types from './phonebook-types';\n\nconst initialContacts = [\n  { id: 'id-1', name: 'Elon Mask', number: '10664888778' },\n  { id: 'id-2', name: 'Lena Kharchenko', number: '380664969795' },\n  { id: 'id-3', name: 'Bill Gates', number: '10662475771' },\n  { id: 'id-4', name: 'Mark Zuckerberg ', number: '10625884318' },\n];\n\n//*** Step 2 ***\nconst items = createReducer(initialContacts, {\n  [addContact]: (state, { payload }) => [payload, ...state],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (state, { payload }) => payload,\n});\n\n//*** Step 1 ***\n// const items = (state = initialContacts, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [payload, ...state];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     case types.OVERWRITE:\n//       return [...payload];\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport phonebookReducer from './phonebook-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst phonebookPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(phonebookPersistConfig, phonebookReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const todos = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return todos.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import React from 'react';\nimport s from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\n// import PropTypes from 'prop-types';\nimport { getContacts } from '../../redux/phonebook-selectors';\nimport * as phonebookActions from '../../redux/phonebook-actions';\nimport s from './Form.module.css';\n\nexport default function MyForm() {\n  //*** Step 2 ***\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) =>\n    dispatch(phonebookActions.addContact(name, number));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactMatching = () => {\n    const namesInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n\n    const numbersInPhonebook = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (\n      namesInPhonebook.includes(name) ||\n      numbersInPhonebook.includes(number)\n    ) {\n      alert(`${name}${number} is already in contacts`);\n      return true;\n    }\n\n    if (name === '' || number === '') {\n      alert('Please enter all data');\n      return true;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setName('');\n    setNumber('');\n\n    if (contactMatching()) {\n      return;\n    }\n\n    onSubmit(name, number);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Elon Mask\"\n          onChange={e => setName(e.currentTarget.value)}\n          className={s.input}\n        />\n      </label>\n      <label>\n        Number\n        <PhoneInput\n          country={'us'}\n          value={number}\n          placeholder=\"10664888778\"\n          onChange={setNumber}\n        />\n      </label>\n      <div className={s.buttonWrapper}>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n}\n\n// MyForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n// };\n\n//*** Step 1 ***\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) =>\n//     dispatch(phonebookActions.addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(MyForm);\n","// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { getFilter } from '../../redux/phonebook-selectors';\nimport * as phonebookActions from '../../redux/phonebook-actions';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  //*** Step 2 ***\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(phonebookActions.changeFilter(e.target.value));\n\n  return (\n    <label className={s.filter}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Enter name to search\"\n        className={s.input}\n      />\n    </label>\n  );\n}\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n//*** Step 1 ***\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(phonebookActions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as phonebookActions from '../../redux/phonebook-actions';\nimport { getVisibleContacts } from '../../redux/phonebook-selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  //*** Step 2 ***\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(phonebookActions.deleteContact(id));\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <span className={s.heart}>&hearts;</span>\n          <p className={s.text}>\n            {name}: {number}\n          </p>\n          <span className={s.span}></span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className={s.button}\n          >\n            <span className={s.times}>&times;</span>\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n//*** Step 1 ***\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(phonebookActions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useRef, useEffect } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from './redux/phonebook-selectors';\nimport * as phonebookActions from './redux/phonebook-actions';\nimport Container from './components/Container';\nimport Section from './components/Section';\nimport MyForm from './components/Form';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nexport default function App() {\n  //*** Step 2 ***\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const isFirstRender = useRef(true);\n\n  // useEffect(() => {\n  //   if (isFirstRender.current) {\n  //     const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n  //     if (parsedContacts) {\n  //       dispatch(phonebookActions.overwriteContacts(parsedContacts));\n  //       // onFirstRender(parsedContacts);\n  //     }\n\n  //     isFirstRender.current = false;\n  //     return;\n  //   }\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <MyForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\n\n//*** Step 1 ***\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onFirstRender: parsedContacts =>\n//     dispatch(phonebookActions.overwriteContacts(parsedContacts)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2PFGY\",\"item\":\"ContactList_item__1CvXs\",\"text\":\"ContactList_text__RMh8U\",\"span\":\"ContactList_span__1aoGD\",\"button\":\"ContactList_button__2K3Iq\",\"heart\":\"ContactList_heart__NIgrR\",\"times\":\"ContactList_times__1frn3\"};"],"sourceRoot":""}